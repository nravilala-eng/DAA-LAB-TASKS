#include <stdio.h>

int main() {
    int i, j, k, n, a[10][10], indeg[10], flag[10], count = 0;

    printf("Enter the number of vertices:\n");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        printf("Enter row %d: ", i + 1);
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    }

    for (i = 0; i < n; i++) {
        indeg[i] = 0;
        flag[i] = 0;
    }

    // Compute in-degree of each vertex
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            indeg[i] += a[j][i];

    printf("\nThe topological order is: ");

    while (count < n) {
        for (k = 0; k < n; k++) {
            if ((indeg[k] == 0) && (flag[k] == 0)) {
                printf("%d ", k + 1);
                flag[k] = 1;
                count++;

                // Reduce in-degree of adjacent vertices
                for (i = 0; i < n; i++) {
                    if (a[k][i] == 1)
                        indeg[i]--;
                }
            }
        }
    }

    printf("\n");
    return 0;
}
#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100005

typedef struct {
    int vertex;
    struct Node* next;
} Node;

Node* graph[MAX_NODES];
int indegree[MAX_NODES];

// Function to add an edge to the graph
void addEdge(int u, int v) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = v;
    newNode->next = graph[u];
    graph[u] = newNode;
}

// Function to perform topological sort using BFS
void topologicalSort(int N) {
    int queue[MAX_NODES], front = 0, rear = 0;
    for (int i = 1; i <= N; i++) {
        if (indegree[i] == 0)
            queue[rear++] = i;
    }

    while (front < rear) {
        int u = queue[front++];
        printf("%d ", u); // Output the node in topological order
        Node* temp = graph[u];
        while (temp != NULL) {
            int v = temp->vertex;
            indegree[v]--;
            if (indegree[v] == 0)
                queue[rear++] = v;
            temp = temp->next;
        }
    }
}

int main() {
    int N, M;
    printf("Enter the number of nodes and edges: ");
    scanf("%d %d", &N, &M);

    // Initialize graph and arrays
    for (int i = 1; i <= N; i++) {
        graph[i] = NULL;
        indegree[i] = 0;
    }

    // Read edges and construct the graph
    printf("Enter the edges (u v):\n");
    for (int i = 0; i < M; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(u, v);
        indegree[v]++;
    }

    printf("Topological ordering: ");
    topologicalSort(N);
    printf("\n");

    return 0;
}
