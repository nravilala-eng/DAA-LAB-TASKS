#include <stdio.h> 
int main() 
{
 int a = 4;
 int b = 6;
 int c;
 c = a + b; 
printf(%d, c);


for (int i = 1; i <= n; i += c)
 { 
// some expressions 
}


function(int n) { 
Time Complexity Calculation:  
Even though the inner loop is bounded by n,  but due to break statement it is executing only once.

    if (n==1) 
       return; 
    for (int i=1; i<=n; i++) 
    { 
        for (int j=1; j<=n; j++) 
        { 
            printf("*"); 
            break; 
        }     } 
Time Complexity Calculation:  
          
         for (int i = 0; i < n; i++) // Executed n times

        Complexity will be O(n)
 



         int m=0;
         for (int i = 0; i < n; i++) {
             m=m+1;
  }
 

#include <stdio.h>
Time Complexity Calculation:  
In the given snippet, the first & the second for loops get executed n times individually. So the time complexity accounts to n*n = O(n2)

int main()
{
int i,j,n = 8;
for (int i = 1; i <= n; i++)
{
for (int j = 1; j <= n; j++)
{
printf("VELTECH\n");
} } } 


Time Complexity Calculation:  
⦁	nested loops is equal to the number of times the innermost statement is executed
⦁	Selection sort and Insertion Sort have O(n2) time complexity

for (int i = 1; i <=n; i += c) 
{ 
	for (int j = 1; j <=n; j += c)
		 { 
		   // some expressions 
		} 
}

int m=0;

       // Executed n times
         for (int i = 0; i < n; i++) {
             m=m+1;
  }
    // outer loop executed n times
   for (int i = 0; i < n; i++) {
// inner loop executed n times
       for(int j = 0; j < n; j++)
             m=m+1;
  }

for (int i = 1; i <=n; i *= c) 
Time Complexity Calculation:  
⦁	The loop variables is divided / multiplied by a constant amount
⦁	Binary Search has O(Logn) time complexity.

{ 
		// some expressions 
} 
for (int i = n; i > 0; i /= c) 
{ 
		// some expressions
 }

int m=0;
      
    // outer loop executed n/2 times
   for (int i = n/2; i < n; i++) {
// middle loop executed n/2 times
       for(int j = n/2; j < n; j++)
      // inner loop executed n times
          for(int k=0;k < n; k++ )
             m=m+1;
  }

